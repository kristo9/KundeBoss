import { Context, HttpRequest } from "@azure/functions"

module.exports = (context: Context, req: HttpRequest): any => {

    const validator: any = require('../SharedFiles/inputValidation');

    req.body = validator.sanitizeHtmlJson(req.body);
    
    let token = req.headers.authorization;

    req.body = 

    if (token)
        token = req.headers.authorization.replace(/^Bearer\s+/, "");
    else {
        context.res = {
            status: 400,
            body: {
                "error": "no token"
            }
        };
        return context.done();
    }

    const dbDep: any = require('../SharedFiles/dataBase');

    // TODO: Query to run on database
    const query = {

    };

    // TODO: Projection,  Only for retrieving data
    const projection = {
    };

    const inputValidation = () => {

        //TODO: Checks to see if inputs are valid

        if (/* If vaiid inputs are */ true) {

            dbDep.connectRead(context, authorize);

        } else {
            context.res = {
                status: 400,
                body: {
                    // TODO:
                    error: "Appropriate error message"
                }
            };
            return context.done();
        }
    };

    const authorize = (client) => {

        verify(token, options)
            .then(decoded => {
                //TODO Verify that user has permission to do what is asked
                 context.log("valid token");
                if(yes){
                    functionQuery(client);
                }else{

                // not authorizazed
                    context.res = {
                        status: 401,
                        body: {
                            'name': "unauthorized",
                        }
                    };
                    context.log("not authorizazed");
                    return context.done();
                }                
            })
            .catch(error => {
                // invalid token
                context.res = {
                    status: 401,
                    body: {
                        'name': "unauthorized",
                    }
                };
                context.log("invalid token");
                return context.done();
        });

    };

    const functionQuery = (client) => {

        /* TODO: add collection name
        
        if inserting : client.db(dbDep.DBName).collection("Collection Name").insertOne(query, (error, docs) => {*/
        client.db(dbDep.DBName).collection("Collection Name").find(query).project(projection).toArray((error, docs) => {
            if (error) {
                context.log('Error running query');
                context.res = { status: 500, body: 'Error running query' }
                return context.done();
            }

            docs = validator.sanitizeHtmlJson(docs);

            context.log('Success!');
            context.res = {
                headers: { 'Content-Type': 'application/json' },
                body: docs
            };
            context.done();
        });
    };

    inputValidation();
};