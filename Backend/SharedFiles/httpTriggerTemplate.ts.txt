import { Context, HttpRequest } from "@azure/functions"

module.exports = (context: Context, req: HttpRequest): any => {
    const dbDep: any = require('../SharedFiles/dataBase');

    // Todo: Query to run on database
    const query = {

    }

    // Todo: Projection,  Only for retrieving data
    const projection = {
    }

    const inputValidation = () => {

        //Todo: Checks to see if inputs are valid

        if (/* If vaiid inputs are */ true) {

            connect();

        } else {
            context.res = {
                status: 400,
                body: {
                    // Todo:
                    error: "Appropriate error message"
                }
            }
            return context.done();
        }
    }

    const connect = () => {
        // Todo: replace clientRead with clientWrite

        if (dbDep.clientRead == null) {
            dbDep.MongoClient.connect(dbDep.uriRead, (error, _client) => {
                if (error) {

                    context.log('Failed to connect');
                    context.res = { status: 500, body: 'Failed to connect' }
                    return context.done();
                }
                dbDep.clientRead = _client;
                context.log('Connected');
                authorize(dbDep.clientRead);
            })
        }
        else {
            authorize(dbDep.clientRead);
        }
    }

    const authorize = (client) => {

        // Todo: check if valid credentials

        if (/* if valid credetials are */ true) {

            functionQuery(client)

        } else {
            context.log('Unauthorized');
            context.res = { status: 401, body: 'Unauthorized' }
            return context.done();
        }
    }

    const functionQuery = (client) => {

        /* Todo: add collection name
        
        if inserting : client.db(dbDep.DBName).collection("Collection Name").insertOne(query, (error, docs) => {*/
        client.db(dbDep.DBName).collection("Collection Name").find(query).project(projection).toArray((error, docs) => {
            if (error) {
                context.log('Error running query');
                context.res = { status: 500, body: 'Error running query' }
                return context.done();
            }

            context.log('Success!');
            context.res = {
                headers: { 'Content-Type': 'application/json' },
                body: docs
            };
            context.done();
        });
    }

    inputValidation();
}