import { Context, HttpRequest } from '@azure/functions';
import { prepInput, returnResult, errorWrongInput} 
  from '../SharedFiles/dataValidation';
import { getKey, options, prepToken, errorQuery, errorUnauthorized, }
  from '../SharedFiles/auth';
import { verify } from 'jsonwebtoken';
import { collections, connectRead, connectWrite,} 
  from '../SharedFiles/dataBase';
import { Db, Decoded } from '../SharedFiles/interfaces';

export = (context: Context, req: HttpRequest): any => {
  /* All medlsendt data kjøres gjennom en funksjon for html og javascript
     desinfisering */
  req.body = prepInput(context, req.body);

  if (req.body === null) {
    return context.done();
  }
  /* Funksjon som klargjør access-token for autentisering/autorisering */
  let token = prepToken(context, req.headers.authorization);
  /* Funksjonen brytes med feilkode 400 hvis det ikke sendes med en access 
     token */
  if (token === null) {
    return context.done();
  }

  const inputValidation = () => {
    let validInput = true;
    /* Her legges tester for sjekke at dataen som sendes i http forspørselen
       er på riktig format */
    if (validInput) {
      /* Funksjon som sender henter en tilkobling til databasen med 
         eserettigheter. Funksjonen authorize() kalles som en callback 
         funksjon. Funksjonen returnerer med feilkode 500 hvis tilkobling 
         til databasen feilet.  */
      connectRead(context, authorize);
    } else {
      /* Returnerer feilkode 400 hvis med sendt data er på feil format */
      errorWrongInput(context);
      return context.done();
    }
  };

  const authorize = (db: Db) => {
    /* Access token verifiseres og dekrypteres */
    verify(token, getKey, options, (err: any, decoded: Decoded) => {
      if (err) {
        errorUnauthorized(
          context,
          'Token not valid'
        ); 
        return context.done();
      } else {
        /* Eksempel på hvordan api'et sjekker at en ansatt har admin 
          rettigheter */
        db.collection(collections.employee).findOne(
          {
            'employeeId': decoded.preferred_username,
          },
          {
            'admin': 1,
          },
          (error: any, docs: { admin: string }) => {
            if (error) {
            /* Returnerer feilkode 500 hvis tilkobling til databasen feilet*/
              errorQuery(context);
              return context.done();
            } else {
              if (docs.admin === 'write') {
                /* Hvis brukeren har de rikgtige rettigheten kalles 
                  funksjonen functionQuery. Den får en databasetilkobling med
                  skriverettigheter hvis den trenger det. */
                connectWrite(context, functionQuery);
              } else {
                /* Returnerer statuskode 401 hvis brukeren ikke har riktige
                  rettigheter */
                errorUnauthorized(context, 'User dont have admin permission');
                return context.done();
              }
            }
          }
        );
      }
    });
  };

  const query = {};
  /* Brukes når det hentes data */
  const projection = {};
  /* Ekspel på å lage ny kunde */
  const functionQuery = (db: Db) => {
    db.collection(collections.customer).insertOne(
      query,
      (error: any, docs: JSON | JSON[]) => {
        if (error) {
          errorQuery(context);
          return context.done();
        }
        /* Returnerer statuskode 200 hvis alt gikk som det skulle.
        All dataen som returneres desinfisering for html og javascript kode*/
        returnResult(context, docs);
        context.done();
      }
    );
  };
  /* Første funksjon som kalles */
  inputValidation();
};